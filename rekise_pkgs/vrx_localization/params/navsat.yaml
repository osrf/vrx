navsat_transform_node:
    ros__parameters:
# Frequency of the main run loop
        # tf_prefix: wamv
        frequency: 10.0

# PLEASE READ: Like all nodes in robot_localization, this node assumes that your IMU data is reported in the ENU frame.
# Many IMUs report data in the NED frame, so you'll want to verify that your data is in the correct frame before using
# it. 

# If your IMU does not account for magnetic declination, enter the value for your location here. If you don't know it,
# see http://www.ngdc.noaa.gov/geomag-web/ (make sure to convert the value to radians). This parameter is mandatory.
        magnetic_declination_radians: 0.0

# Your IMU's yaw, once the magentic_declination_radians value is added to it, should report 0 when facing east. If it
# doesn't, enter the offset here. Defaults to 0.
        yaw_offset: 0.0

# If this is true, the altitude is set to 0 in the output odometry message. Defaults to false.
        zero_altitude: false

# If this is true, the transform world_frame->utm transform is broadcast for use by other nodes. Defaults to false.
        broadcast_cartesian_transform: true

# If this is true, the utm->world_frame transform will be published instead of the world_frame->utm transform. 
# Note that broadcast_utm_transform still has to be enabled. Defaults to false.
        broadcast_utm_transform_as_parent_frame: true

# If this is true, all received odometry data is converted back to a lat/lon and published as a NavSatFix message as
# /gps/filtered. Defaults to false.
        publish_filtered_gps: false

# If this is true, the node ignores the IMU data and gets its heading from the odometry source (typically the
# /odometry/filtered topic coming from one of robot_localization's state estimation nodes). BE CAREFUL when using this!
# The yaw value in your odometry source *must* be world-referenced, e.g., you cannot use your odometry source for yaw
# if your yaw data is based purely on integrated velocities. Defaults to false.
        use_odometry_yaw: false

# If true, will retrieve the datum from the 'datum' parameter below, if available. If no 'datum' parameter exists,
# navsat_transform_node will wait until the user calls the 'datum' service with the SetDatum service message.
        wait_for_datum: false
        # wait_for_datum: true
        # datum: [-33.72276872, 150.67398912, 1.0]

#in launch file for wamv, position to set to 1.0.
#Use UTM frame. Initialise datum at start location.